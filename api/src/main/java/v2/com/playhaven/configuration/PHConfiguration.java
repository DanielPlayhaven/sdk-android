package v2.com.playhaven.configuration;

import android.content.Context;
import android.content.SharedPreferences;
import v2.com.playhaven.utils.PHStringUtil;

import java.math.BigInteger;

/** 
 * Simple class for manging the various device values
 * that all components of the application need to access.
 *
 * This class used to be a Singleton but due to strange cross-activity
 * errors the team changed it to rely on the shared preferences.
 *
 * Now anyone who wishes to access the shared configuration should make an instance
 * and call the appropriate methods.
 *
 * Because we marketplace the settings in the preferences you must always provide a context.
 * */
public class PHConfiguration {

    /////////////////////////////////////////////
    private enum Config {
        SdkVersion,
        Token,
        Secret,
        Username,
        Password,
        ShouldPrecache,
        APIUrl,
        RunningUiTests
    }

	/////////////////////////////////////////////
	///////// Configuration Variables ///////////

    /**
     * Shared Preferences file
     *
     * @see Context#getSharedPreferences(String, int)
     */
    private static final String SHARED_PREF_NAME = PHConfiguration.class.getName();

    /**
     * Shared Preferences operating mode
     *
     * @see Context#getSharedPreferences(String, int)
     */
    private static final int SHARED_PREF_MODE = Context.MODE_PRIVATE;


	public static enum ConnectionType {
	    NO_NETWORK,
	    MOBILE,
	    WIFI,
	    NO_PERMISSION;
	}


    /////////////////////////////////////////
    //////////// Accessors //////////////////

    /**
     * Validate that the specified value is not null/empty and can be represented as a hex character.
     * @param value to be tested
     * @return true if the credential is valid, false otherwise.
     */
    private boolean validateCredential(final String value) throws RuntimeException {
        // check the obvious properties such as length and nullity
        if (value == null || value.length() == 0)
            return false;

        return true;
    }

    /**
     * Sets the token and secret
     * @param context a valid context
     * @param token the token for the api requests
     * @param secret the secret for the api requests
     */
    public void setCredentials(Context context, String token, String secret) {
        // make certain both are valid before setting them.
        // if they are not valid, we fail silently and leave the previous
        // information untouched. This is a fix (not ideal for the
        // Pivotal story "rattlesnake".

        if (validateCredential(token))
            setString(context, Config.Token.toString(), token);

        if (validateCredential(secret))
            setString(context, Config.Secret.toString(), secret);

        // by default we are not running UI tests
        setIsRunningUITests(context, false);

        // turn on caching by default
        setShouldPrecache(context, true);

        // output more information about this build
        PHStringUtil.log("PlayHaven initialized: " + this.getPlayhavenBuildInfo());
    }

    public String getToken(Context context) {
        return getString(context, Config.Token.toString());
    }

    public String getSecret(Context context) {
        return getString(context, Config.Secret.toString());
    }

    public String getStagingUsername(Context context) {
        return getString(context, Config.Username.toString());
    }

    public String getStagingPassword(Context context) {
        return getString(context, Config.Password.toString());
    }

    public void setStagingUsername(Context context, String username) {
        setString(context, Config.Username.toString(), username);
    }

    public int getPrecacheSize() {
        return 1024 * 1024 * 8;
    }

    public void setStagingPassword(Context context, String password) {
        setString(context, Config.Password.toString(), password);
    }

    /**
     * Gets the raw SDK version but might have "-SNAPSHOT"
     * suffix. If you are talking with the server, you should
     * use {@link #getCleanSDKVersion()} to ensure a valid version number
     * until the SDK team adds support for parsing the "-SNAPSHOT" suffix off.
     * @return the project version from quicktag.
     */
    public String getSDKVersion() {
        // use version auto-generated by quicktag
        return Version.PROJECT_VERSION;
    }

    /**
     * Strips off the "-SNAPSHOT" suffix so that
     * we return only the version number. Until
     * the server team accepts version numbers with -SNAPSHOT
     * attached this method is necessary.
     */
    public String getCleanSDKVersion() {
        return getSDKVersion().replace("-SNAPSHOT", "");
    }

    public String getPlayhavenBuildInfo() {
        // use version auto-generated by quicktag
        return Version.BANNER;
    }

    public void setAPIUrl(Context context, String api) {
        setString(context, Config.APIUrl.toString(), api);
    }

    public String getAPIUrl(Context context) {
        String api_url = getString(context, Config.APIUrl.toString());

        if (api_url == null)
                api_url = "http://api2.playhaven.com";

        return api_url;
    }

    public int getJSBridgeProtocolVersion() {
        return 4;
    }

    public boolean getShouldPrecache(Context context) {
        return Boolean.valueOf(getString(context, Config.ShouldPrecache.toString()));
    }

    public void setShouldPrecache(Context context, boolean shouldPrecache) {
        setString(context, Config.ShouldPrecache.toString(), Boolean.toString(shouldPrecache));
    }

    public boolean getIsRunningUITests(Context context) {
        return Boolean.valueOf(getString(context, Config.RunningUiTests.toString()));
    }

    public void setIsRunningUITests(Context context, boolean isRunning) {
        setString(context, Config.RunningUiTests.toString(), Boolean.toString(isRunning));
    }

    private void setString(Context context, String key, String value) {
        Context appContext = context.getApplicationContext(); // make sure we have an app context

        SharedPreferences prefs = appContext.getSharedPreferences(SHARED_PREF_NAME, SHARED_PREF_MODE);
        SharedPreferences.Editor editor = prefs.edit();

        editor.putString(key, value);

        editor.commit();
    }

    private String getString(Context context, String key) {
        Context appContext = context.getApplicationContext(); // make sure we have an app context


        SharedPreferences prefs = appContext.getSharedPreferences(SHARED_PREF_NAME, SHARED_PREF_MODE);

        return prefs.getString(key, null);
    }
}
