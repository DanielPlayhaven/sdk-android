package v2.com.playhaven.interstitial.requestbridge.bridges;

import android.os.Bundle;
import v2.com.playhaven.interstitial.PHInterstitialActivity;
import v2.com.playhaven.interstitial.requestbridge.base.ContentDisplayer;
import v2.com.playhaven.interstitial.requestbridge.base.ContentRequester;
import v2.com.playhaven.interstitial.requestbridge.base.RequestBridge;
import v2.com.playhaven.listeners.PHContentRequestListener;
import v2.com.playhaven.listeners.PHPurchaseListener;
import v2.com.playhaven.listeners.PHRewardListener;
import v2.com.playhaven.model.PHContent;
import v2.com.playhaven.model.PHError;
import v2.com.playhaven.model.PHPurchase;
import v2.com.playhaven.model.PHReward;
import v2.com.playhaven.requests.content.PHContentRequest;
import v2.com.playhaven.utils.PHStringUtil;

import java.lang.ref.WeakReference;

/**
 * Specific bridge between the a {@link v2.com.playhaven.requests.content.PHContentRequest}
 * and a {@link v2.com.playhaven.interstitial.PHInterstitialActivity}. It calls all of the appropriate
 * callbacks for the {@link PHContentRequest}.
 *
 * This bridge should <em>only</em> be used between {@link PHContentRequest} and {@link PHInterstitialActivity}
 * to avoid crashes.
 */
public class ContentRequestToInterstitialBridge extends RequestBridge {


    /** The names of the various events that the {@link PHInterstitialActivity}
     * can send.
     */
    public static enum InterstitialEvent {
        Loaded,
        Dismissed,
        Failed,
        UnlockedReward,
        MadePurchase,
        PurchaseResolved,
        SentSubrequest,
        ReceivedWebviewDispatch,
        LaunchedURL;
    }

    /** The additional arguments each event might pass back */
    public static enum InterstitialEventArgument {

        CloseType	("closetype_contentview"),
        Content 	("content_contentview"),
        Error		("error_contentview"),
        Reward		("reward_contentview"),
        Purchase	("purchase_contentview"),
        Dispatch 	("dispatch_contentview"),
        LaunchURL   ("launchurl_contentview");

        private String key;

        public String getKey() {
            return key;
        }

        private InterstitialEventArgument(String key) {
            this.key = key;
        }
    }

    private PHContentRequestListener content_listener;

    private PHRewardListener reward_listener;

    private PHPurchaseListener purchase_listener;

    /** A reference to the {@link PHContentRequest} because
     * we need to pass it back to the listeners.
     */
    private WeakReference<PHContentRequest> contentRequest;

    /**
     * We need a reference to the {@link PHInterstitialActivity}
     * because we need to notify it that a purchase was resolved.
     */
    private WeakReference<PHInterstitialActivity> interstitialActivity;

    public ContentRequestToInterstitialBridge(String tag) {
        super(tag);
    }

    @Override
    public void onRequesterAttached(ContentRequester requester) {
        // we need a reference to the content request
        this.contentRequest = new WeakReference<PHContentRequest>((PHContentRequest) requester);
    }

    @Override
    public void onDisplayerAttached(ContentDisplayer displayer) {
        this.interstitialActivity = new WeakReference<PHInterstitialActivity>((PHInterstitialActivity) displayer);
    }

    public void attachRewardListener(PHRewardListener listener) {
        this.reward_listener = listener;
    }

    public void attachPurchaseListener(PHPurchaseListener listener) {
        this.purchase_listener = listener;
    }

    public void attachContentListener(PHContentRequestListener listener) {
        this.content_listener = listener;

    }


    /**
     * Handles the events generated by {@link PHContentRequest} and informs
     * the {@link PHInterstitialActivity} and the {@link android.webkit.WebView} within it of the
     * event.
     * @param event
     * @param messageData
     */
    @Override
    public void onRequesterSentMessage(String event, Bundle messageData) {

        if (event == null) return;

        if (interstitialActivity == null || interstitialActivity.get() == null) return;

        InterstitialEvent eventParsed = InterstitialEvent.valueOf(event);

        // if the user just made a purchase, we should notify the content
        // interstitial containing the content templates.
        if (eventParsed == InterstitialEvent.PurchaseResolved) {

            String purchase_key = InterstitialEventArgument.Purchase.getKey();

            PHPurchase purchase = (PHPurchase) messageData.getParcelable(purchase_key);

            PHStringUtil.log("Displayer received purchase resolution: " + purchase.resolution);

            interstitialActivity.get().onPurchaseResolved(purchase);
        }


    }

    @Override
    public String getRequesterIntentFilter() {
        return "v2.com.playhaven.interstitial.ContentRequesterEvent";
    }

    @Override
    public String getDisplayerIntentFilter() {
        return "v2.com.playhaven.interstitial.ContentDisplayerEvent";
    }

    @Override
    public void cleanup() {
        content_listener    = null;
        reward_listener     = null;
        purchase_listener   = null;
    }

    /**
     * Handles the events generated by {@link PHInterstitialActivity} and forwards
     * them to the appropriate delegates.
     * @param event the name of the event.
     * @param message the payload of the event.
     */
    @Override
    public void onDisplayerSentMessage(String event, Bundle message) {

        if (contentRequest == null || contentRequest.get() == null) return;

        InterstitialEvent parsedEvent = InterstitialEvent.valueOf(event);

        PHStringUtil.log("ContentRequestToInterstitial bridge handling: " + parsedEvent.name());

        PHStringUtil.log("ContentListener: "  + content_listener);
        PHStringUtil.log("RewardListener: "   + reward_listener);
        PHStringUtil.log("PurchaseListener: " + purchase_listener);

        switch (parsedEvent) {

            case Loaded:

                PHContent content = (PHContent) message.getParcelable(InterstitialEventArgument.Content.getKey());

                if (content_listener != null && content != null)
                    content_listener.onDisplayedContent(contentRequest.get(), content);

                 break;

            case Dismissed:

                String dismissTypeStr                      = message.getString(InterstitialEventArgument.CloseType.getKey());



                // tell our own listener that the interstitial was dismissed
                if(content_listener != null && dismissTypeStr != null) {
                    PHContentRequest.PHDismissType dismissType = PHContentRequest.PHDismissType.valueOf(dismissTypeStr);

                    content_listener.onDismissedContent(contentRequest.get(), dismissType);
                }


                break;

            case Failed:

                String error = message.getString(InterstitialEventArgument.Error.getKey());

                if (content_listener != null && error != null) {
                    content_listener.onFailedToDisplayContent(contentRequest.get(), new PHError(error));
                }

                break;

            case UnlockedReward:
                // the activity's webview called to unlock a reward so
                // we notify the listener appropriately.
                PHReward reward = message.getParcelable(InterstitialEventArgument.Reward.getKey());

                if (reward_listener != null && reward != null)
                    reward_listener.onUnlockedReward(contentRequest.get(), reward);

                break;

            case MadePurchase:

                PHPurchase purchase = message.getParcelable(InterstitialEventArgument.Purchase.getKey());

                if (purchase_listener != null && purchase != null)
                    purchase_listener.onMadePurchase(contentRequest.get(), purchase);

                break;
        }
    }

}
